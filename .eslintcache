[{"/Users/xingfeng.yang/project/scpweb/src/index.js":"1","/Users/xingfeng.yang/project/scpweb/src/App.js":"2","/Users/xingfeng.yang/project/scpweb/src/reportWebVitals.js":"3","/Users/xingfeng.yang/project/scpweb/src/components/header/Header.js":"4","/Users/xingfeng.yang/project/scpweb/src/components/left-menu/LeftMenu.js":"5","/Users/xingfeng.yang/project/scpweb/src/pages/dashboard/DashBoard.js":"6","/Users/xingfeng.yang/project/scpweb/src/components/left-menu/MenuItem.js":"7","/Users/xingfeng.yang/project/scpweb/src/components/breadcrumb-menu/BreadCrumbMenu.js":"8","/Users/xingfeng.yang/project/scpweb/src/components/card/Card.js":"9","/Users/xingfeng.yang/project/scpweb/src/pages/charts/Charts.js":"10","/Users/xingfeng.yang/project/scpweb/src/components/button/PushButton.js":"11","/Users/xingfeng.yang/project/scpweb/src/components/modal/ModalWrapper.js":"12","/Users/xingfeng.yang/project/scpweb/src/reducers/ScpReducer.js":"13","/Users/xingfeng.yang/project/scpweb/src/actions/ProjectsAction.js":"14","/Users/xingfeng.yang/project/scpweb/src/api/ScpApi.js":"15","/Users/xingfeng.yang/project/scpweb/src/pages/app_create/AppCreate.js":"16","/Users/xingfeng.yang/project/scpweb/src/pages/projects/Projects.js":"17","/Users/xingfeng.yang/project/scpweb/src/pages/project_create/ProjectCreate.js":"18","/Users/xingfeng.yang/project/scpweb/src/pages/tools/Tools.js":"19","/Users/xingfeng.yang/project/scpweb/src/api/Fetch.js":"20","/Users/xingfeng.yang/project/scpweb/src/actions/ToolsAction.js":"21","/Users/xingfeng.yang/project/scpweb/src/pages/project/Project.js":"22","/Users/xingfeng.yang/project/scpweb/src/actions/BreadCrumbMenuAction.js":"23","/Users/xingfeng.yang/project/scpweb/src/pages/app/Application.js":"24","/Users/xingfeng.yang/project/scpweb/src/pages/tool/Tool.js":"25","/Users/xingfeng.yang/project/scpweb/src/pages/case_create/CaseCreate.js":"26","/Users/xingfeng.yang/project/scpweb/src/pages/cases/Cases.js":"27","/Users/xingfeng.yang/project/scpweb/src/actions/CasesAction.js":"28","/Users/xingfeng.yang/project/scpweb/src/pages/case_groups/CaseGroups.js":"29","/Users/xingfeng.yang/project/scpweb/src/pages/case_group_create/CaseGroupCreate.js":"30","/Users/xingfeng.yang/project/scpweb/src/actions/TasksAction.js":"31","/Users/xingfeng.yang/project/scpweb/src/pages/case/Case.js":"32","/Users/xingfeng.yang/project/scpweb/src/pages/task_create/TaskCreate.js":"33","/Users/xingfeng.yang/project/scpweb/src/components/task-list/ScanTaskList.js":"34","/Users/xingfeng.yang/project/scpweb/src/pages/task/Task.js":"35","/Users/xingfeng.yang/project/scpweb/src/pages/no-match/NoMatch.js":"36","/Users/xingfeng.yang/project/scpweb/src/pages/case_editor/CaseEditor.js":"37"},{"size":911,"mtime":1612255549139,"results":"38","hashOfConfig":"39"},{"size":10667,"mtime":1612271560326,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1611128642506,"results":"41","hashOfConfig":"39"},{"size":282,"mtime":1611132780632,"results":"42","hashOfConfig":"39"},{"size":3552,"mtime":1612077074280,"results":"43","hashOfConfig":"39"},{"size":9450,"mtime":1612267750895,"results":"44","hashOfConfig":"39"},{"size":3147,"mtime":1612077471240,"results":"45","hashOfConfig":"39"},{"size":816,"mtime":1611909547735,"results":"46","hashOfConfig":"39"},{"size":545,"mtime":1611932746420,"results":"47","hashOfConfig":"39"},{"size":29140,"mtime":1611811638786,"results":"48","hashOfConfig":"39"},{"size":414,"mtime":1611902242510,"results":"49","hashOfConfig":"39"},{"size":1629,"mtime":1611810882879,"results":"50","hashOfConfig":"39"},{"size":9934,"mtime":1612027803457,"results":"51","hashOfConfig":"39"},{"size":2373,"mtime":1611930259696,"results":"52","hashOfConfig":"39"},{"size":374,"mtime":1612002099694,"results":"53","hashOfConfig":"39"},{"size":5166,"mtime":1611926769117,"results":"54","hashOfConfig":"39"},{"size":7248,"mtime":1611927110486,"results":"55","hashOfConfig":"39"},{"size":4526,"mtime":1611926785368,"results":"56","hashOfConfig":"39"},{"size":6915,"mtime":1611934609542,"results":"57","hashOfConfig":"39"},{"size":2621,"mtime":1611924750804,"results":"58","hashOfConfig":"39"},{"size":618,"mtime":1612002951743,"results":"59","hashOfConfig":"39"},{"size":6147,"mtime":1612029556158,"results":"60","hashOfConfig":"39"},{"size":284,"mtime":1611908161495,"results":"61","hashOfConfig":"39"},{"size":5649,"mtime":1612262318035,"results":"62","hashOfConfig":"39"},{"size":7134,"mtime":1612026109129,"results":"63","hashOfConfig":"39"},{"size":8052,"mtime":1612003106498,"results":"64","hashOfConfig":"39"},{"size":7104,"mtime":1611984290856,"results":"65","hashOfConfig":"39"},{"size":2861,"mtime":1612009692611,"results":"66","hashOfConfig":"39"},{"size":7232,"mtime":1611984544657,"results":"67","hashOfConfig":"39"},{"size":4620,"mtime":1611988074297,"results":"68","hashOfConfig":"39"},{"size":1735,"mtime":1612261789934,"results":"69","hashOfConfig":"39"},{"size":6374,"mtime":1612271941975,"results":"70","hashOfConfig":"39"},{"size":12914,"mtime":1612019685268,"results":"71","hashOfConfig":"39"},{"size":4401,"mtime":1612267797001,"results":"72","hashOfConfig":"39"},{"size":9633,"mtime":1612263654954,"results":"73","hashOfConfig":"39"},{"size":1448,"mtime":1612030011670,"results":"74","hashOfConfig":"39"},{"size":7646,"mtime":1612273702939,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"vxxpil",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/xingfeng.yang/project/scpweb/src/index.js",[],["165","166"],"/Users/xingfeng.yang/project/scpweb/src/App.js",["167"],"/Users/xingfeng.yang/project/scpweb/src/reportWebVitals.js",[],"/Users/xingfeng.yang/project/scpweb/src/components/header/Header.js",[],["168","169"],"/Users/xingfeng.yang/project/scpweb/src/components/left-menu/LeftMenu.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/dashboard/DashBoard.js",["170","171","172"],"import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport './DashBoard.css'\nimport Card from \"../../components/card/Card\";\nimport {bindActionCreators} from \"redux\";\nimport {getProjects} from \"../../actions/ProjectsAction\";\nimport {connect} from \"react-redux\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCube, faCubes, faFileArchive, faHistory} from \"@fortawesome/free-solid-svg-icons\";\nimport {Link} from \"react-router-dom\";\nimport {getTools} from \"../../actions/ToolsAction\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {Pie} from \"@ant-design/charts\";\nimport {getScanResults, getScanTasks} from \"../../actions/TasksAction\";\nimport {getCases} from \"../../actions/CasesAction\";\nimport ScanTaskList from \"../../components/task-list/ScanTaskList\";\n\nclass DashBoard extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    getToolName(id) {\n        for (let i = 0; i < this.props.tools.length; i++) {\n            if (this.props.tools[i].id === id) {\n                return this.props.tools[i].name;\n            }\n        }\n    }\n\n    render() {\n        let toolsData = [];\n        let data = {};\n        this.props.tools.map((tool, index) => {\n            if (data[tool.category] == null) {\n                data[tool.category] = {\n                    type: tool.category,\n                    value: 1,\n                }\n            } else {\n                data[tool.category].value++;\n            }\n        });\n        for (let key in data) {\n            toolsData.push(data[key]);\n        }\n\n        let toolsConfig = {\n            appendPadding: 20,\n            data: toolsData,\n            angleField: 'value',\n            colorField: 'type',\n            radius: 1,\n            innerRadius: 0.618,\n            meta: {\n                value: {\n                    formatter: function formatter(v) {\n                        return ''.concat(v);\n                    },\n                },\n            },\n            label: {\n                type: 'inner',\n                offset: '-50%',\n                style: {textAlign: 'center'},\n                autoRotate: false,\n                content: '{value}',\n            },\n            interactions: [\n                {type: 'element-selected'},\n                {type: 'element-active'},\n                {type: 'pie-statistic-active'},\n            ],\n        };\n\n        let casesData = [];\n        data = [];\n        this.props.cases.map((cas, index) => {\n            if (data[this.getToolName(cas.securityToolId)] == null) {\n                data[this.getToolName(cas.securityToolId)] = {\n                    type: this.getToolName(cas.securityToolId),\n                    value: 1,\n                }\n            } else {\n                data[this.getToolName(cas.securityToolId)].value++;\n            }\n        });\n        for (let key in data) {\n            casesData.push(data[key]);\n        }\n\n        let casesConfig = {\n            appendPadding: 20,\n            data: casesData,\n            angleField: 'value',\n            colorField: 'type',\n            radius: 1,\n            innerRadius: 0.618,\n            meta: {\n                value: {\n                    formatter: function formatter(v) {\n                        return ''.concat(v);\n                    },\n                },\n            },\n            label: {\n                type: 'inner',\n                offset: '-50%',\n                style: {textAlign: 'center'},\n                autoRotate: false,\n                content: '{value}',\n            },\n            interactions: [\n                {type: 'element-selected'},\n                {type: 'element-active'},\n                {type: 'pie-statistic-active'},\n            ],\n        };\n        return <Container className={'DashBoard'}>\n            <Row>\n                <Col md={8}>\n                    <Row style={{padding: 0, margin: 0}}>\n                        <Card title={'项目'} w={3}>\n                            <Container>\n                                <FontAwesomeIcon style={{fontSize: '2em', color: 'rgb(36, 66, 164)'}} icon={faCube}/>\n                                <Link to={'/projects'}><h1\n                                    style={{display: 'inline-block', padding: 0, margin: 0, marginLeft: '0.5em'}}>{this.props.projects.length}</h1>\n                                </Link>\n                            </Container>\n                        </Card>\n                        <Card title={'应用'} w={3}>\n                            <FontAwesomeIcon style={{fontSize: '2em', color: 'rgb(36, 66, 164)'}} icon={faCubes}/>\n                            <Link to={'/projects'}><h1\n                                style={{display: 'inline-block', padding: 0, margin: 0, marginLeft: '0.5em'}}>{this.props.apps.length}</h1></Link>\n                        </Card>\n                        <Card title={'扫描记录'} w={3}>\n                            <FontAwesomeIcon style={{fontSize: '2em', color: 'rgb(36, 66, 164)'}} icon={faHistory}/>\n                            <Link to={'/dashboard'}><h1\n                                style={{display: 'inline-block', padding: 0, margin: 0, marginLeft: '0.5em'}}>{this.props.tasks.length}</h1></Link>\n                        </Card>\n                        <Card title={'扫描结果'} w={3}>\n                            <FontAwesomeIcon style={{fontSize: '2em', color: 'rgb(36, 66, 164)'}} icon={faFileArchive}/>\n                            <Link to={'/dashboard'}><h1\n                                style={{display: 'inline-block', padding: 0, margin: 0, marginLeft: '0.5em'}}>{this.props.scanResults.length}</h1>\n                            </Link>\n                        </Card>\n                    </Row>\n                    <Row style={{padding: 0, margin: 0}}>\n                        <Card title={'安全工具'} w={6}>\n                            <Pie style={{height: '12em'}} {...toolsConfig} />\n                        </Card>\n                        <Card title={'用例'} w={6}>\n                            <Pie style={{height: '12em'}} {...casesConfig} />\n                        </Card>\n                    </Row>\n                    <Row style={{padding: 0, margin: 0}}>\n                        <Card title={'最近的扫描'} w={12}>\n                            <Container>\n                                <Row>\n                                    {\n                                        (this.props.tasks && this.props.tasks.length !== 0) ? this.tasksFilterNotReady().map((task, index) => {\n                                            return <ScanTaskList task={task} key={index}/>;\n                                        }) : <span style={{color: '#668'}}>无</span>\n                                    }\n                                </Row>\n                            </Container>\n                        </Card>\n                    </Row>\n                </Col>\n                <Col md={4} style={{padding: 0, margin: 0,paddingRight:'1em'}}>\n                    <Row style={{padding: 0, margin: 0}}>\n                        <Card title={'待扫描的任务'} w={12}>\n                            <Container>\n                                <Row>\n                                    {\n                                        (this.props.tasks && this.tasksFilterByStatus('READY').length !== 0) ? this.tasksFilterByStatus('READY').map((task, index) => {\n                                            return <ScanTaskList task={task} key={index}/>;\n                                        }) : <span style={{color: '#668'}}>无</span>\n                                    }\n                                </Row>\n                            </Container>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    }\n\n    tasksFilterNotReady() {\n        let data = [];\n        for (let i = 0; i < this.props.tasks.length; i++) {\n            if (this.props.tasks[i].status !== 'READY') {\n                data.push(this.props.tasks[i]);\n            }\n        }\n        return data;\n    }\n\n    tasksFilterByStatus(status) {\n        let data = [];\n        for (let i = 0; i < this.props.tasks.length; i++) {\n            if (this.props.tasks[i].status === status) {\n                data.push(this.props.tasks[i]);\n            }\n        }\n        return data;\n    }\n\n    componentDidMount() {\n        this.props.getProjects();\n        this.props.getTools();\n        this.props.getCases();\n\n        this.props.getScanTasks({});\n        this.props.getScanResults(1);\n\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Home',\n                clickable: true,\n                route: '/'\n            },\n            {\n                title: 'Dashboard',\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    projects: state.reduxResult.projects.data,\n    apps: state.reduxResult.apps,\n    tools: state.reduxResult.tools.data,\n    cases: state.reduxResult.cases.data,\n    tasks: state.reduxResult.tasks.data,\n    scanResults: state.reduxResult.scanResults.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getProjects,\n    getTools,\n    getCases,\n    getScanTasks,\n    getScanResults,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);\n","/Users/xingfeng.yang/project/scpweb/src/components/left-menu/MenuItem.js",[],"/Users/xingfeng.yang/project/scpweb/src/components/breadcrumb-menu/BreadCrumbMenu.js",["173"],"import {Component} from \"react\";\nimport {Breadcrumb} from \"react-bootstrap\";\n\nimport './BreadCrumbMenu.css'\nimport {Link} from \"react-router-dom\";\n\nclass BreadCrumbMenu extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Breadcrumb className={'BC'}>\n            {\n                this.props.data.map((item, index) => {\n                    return <Breadcrumb.Item key={index}\n                                            active={!item.clickable}> {this.renderLink(item)} </Breadcrumb.Item>\n                })\n            }\n        </Breadcrumb>;\n    }\n\n    renderLink(item) {\n        if (item.clickable) {\n            return <Link to={item.route}>{item.title}</Link>\n        } else {\n            return item.title\n        }\n    }\n}\n\nexport default BreadCrumbMenu;\n","/Users/xingfeng.yang/project/scpweb/src/components/card/Card.js",["174"],"import React, {Component} from \"react\";\n\nimport './Card.css'\nimport {Col, Container} from \"react-bootstrap\";\nclass Card extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Col md={this.props.w} className={'CardContainer'}>\n            {this.props.title ? <h5 style={{color: '#668', fontWeight: 'normal'}}>   {this.props.title}</h5> : null}\n            <Container className={'Card'}>\n                {this.props.children}\n            </Container>\n        </Col>\n    }\n}\n\nexport default Card;\n","/Users/xingfeng.yang/project/scpweb/src/pages/charts/Charts.js",[],["175","176"],"/Users/xingfeng.yang/project/scpweb/src/components/button/PushButton.js",["177"],"import React, {Component} from \"react\";\nimport './PushButton.css';\nimport {Button} from \"react-bootstrap\";\n\nclass PushButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Button style={this.props.style} disabled={this.props.disabled} onClick={this.props.onClick} className={'PushButton'}>{this.props.children}</Button>\n    }\n}\n\nexport default PushButton;\n","/Users/xingfeng.yang/project/scpweb/src/components/modal/ModalWrapper.js",[],"/Users/xingfeng.yang/project/scpweb/src/reducers/ScpReducer.js",["178","179"],"import {AppActions, ProjectActions, ProjectsActions} from \"../actions/ProjectsAction\";\nimport {combineReducers} from 'redux';\nimport {ToolsActions} from \"../actions/ToolsAction\";\nimport {BreadCrumbMenuActions} from \"../actions/BreadCrumbMenuAction\";\nimport {CasesActions} from \"../actions/CasesAction\";\nimport {TasksActions} from \"../actions/TasksAction\";\n\nconst initialState = {\n    projects: {\n        status: false,\n        message: null,\n        data: []\n    },\n    apps: [],\n    tools: {\n        status: false,\n        message: null,\n        data: []\n    },\n    tool: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    project: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    app: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    createProjectResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    createAppResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    createCaseResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    deleteAppResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    deleteProjectResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    breadCrumbMenus: {\n        data: []\n    },\n    cases: {\n        status: false,\n        message: null,\n        data: []\n    },\n    toolCases: {\n        status: false,\n        message: null,\n        data: []\n    },\n    cas: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    caseGroups: {\n        status: false,\n        message: null,\n        data: []\n    },\n    caseGroup: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    deleteCaseResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    deleteCaseGroupResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    createCaseGroupResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    tasks: {\n        status: false,\n        message: null,\n        data: []\n    },\n    task: {\n        status: false,\n        message: null,\n        data: {}\n    },\n    scanResults: {\n        status: false,\n        message: null,\n        data: []\n    },\n    taskStartResult: {\n        status: false,\n        message: null,\n        data: {}\n    },\n};\n\nexport function reduxResult(state = initialState, action) {\n    switch (action.type) {\n        case ProjectsActions.API_PROJECTS_SUCCESS:\n            let applications = [];\n            action.payload.data.map((pj, index) => {\n                pj.applications.map((ap, id) => {\n                    applications.push(ap);\n                });\n            });\n            return Object.assign({}, state, {\n                projects: action.payload,\n                apps: applications,\n            });\n        case ProjectsActions.API_PROJECTS_FAILED:\n            return Object.assign({}, state, {\n                projects: action.payload,\n                apps: [],\n            });\n        case ToolsActions.API_TOOLS_SUCCESS:\n            return Object.assign({}, state, {\n                tools: action.payload,\n            });\n        case ToolsActions.API_TOOLS_FAILED:\n            return Object.assign({}, state, {\n                tools: action.payload,\n            });\n        case ToolsActions.API_TOOL_SUCCESS:\n            return Object.assign({}, state, {\n                tool: action.payload,\n            });\n        case ToolsActions.API_TOOL_FAILED:\n            return Object.assign({}, state, {\n                tool: action.payload,\n            });\n        case ProjectActions.API_PROJECT_SUCCESS:\n            return Object.assign({}, state, {\n                project: action.payload,\n            });\n        case ProjectActions.API_PROJECT_FAILED:\n            return Object.assign({}, state, {\n                project: action.payload,\n            });\n\n        case AppActions.API_APP_SUCCESS:\n            return Object.assign({}, state, {\n                app: action.payload,\n            });\n        case AppActions.API_APP_FAILED:\n            return Object.assign({}, state, {\n                app: action.payload,\n            });\n\n        case ProjectsActions.API_PROJECT_CREATE_SUCCESS:\n            return Object.assign({}, state, {\n                createProjectResult: action.payload,\n            });\n        case ProjectsActions.API_PROJECT_CREATE_FAILED:\n            return Object.assign({}, state, {\n                createProjectResult: action.payload,\n            });\n\n        case AppActions.API_APP_CREATE_SUCCESS:\n            return Object.assign({}, state, {\n                createAppResult: action.payload,\n            });\n        case AppActions.API_APP_CREATE_FAILED:\n            return Object.assign({}, state, {\n                createAppResult: action.payload,\n            });\n\n        case CasesActions.API_CASE_CREATE_SUCCESS:\n            return Object.assign({}, state, {\n                createCaseResult: action.payload,\n            });\n        case CasesActions.API_CASE_CREATE_FAILED:\n            return Object.assign({}, state, {\n                createCaseResult: action.payload,\n            });\n\n        case AppActions.API_APP_DELETE_SUCCESS:\n            return Object.assign({}, state, {\n                deleteAppResult: action.payload,\n            });\n        case AppActions.API_APP_DELETE_FAILED:\n            return Object.assign({}, state, {\n                deleteAppResult: action.payload,\n            });\n\n        case AppActions.API_PROJECT_DELETE_SUCCESS:\n            return Object.assign({}, state, {\n                deleteProjectResult: action.payload,\n            });\n        case AppActions.API_PROJECT_DELETE_FAILED:\n            return Object.assign({}, state, {\n                deleteProjectResult: action.payload,\n            });\n        case BreadCrumbMenuActions.SET_BREAD_CRUMB_MEU:\n            return Object.assign({}, state, {\n                breadCrumbMenus: action.payload,\n            });\n\n\n        case CasesActions.API_CASE_DELETE_SUCCESS:\n            return Object.assign({}, state, {\n                deleteCaseResult: action.payload,\n            });\n        case CasesActions.API_CASE_DELETE_FAILED:\n            return Object.assign({}, state, {\n                deleteCaseResult: action.payload,\n            });\n        case CasesActions.API_CASE_SUCCESS:\n            return Object.assign({}, state, {\n                cas: action.payload,\n            });\n        case CasesActions.API_CASE_FAILED:\n            return Object.assign({}, state, {\n                cas: action.payload,\n            });\n        case CasesActions.API_CASES_SUCCESS:\n            return Object.assign({}, state, {\n                cases: action.payload,\n            });\n        case CasesActions.API_CASES_FAILED:\n            return Object.assign({}, state, {\n                cases: action.payload,\n            });\n        case CasesActions.API_CASE_GROUP_DELETE_SUCCESS:\n            return Object.assign({}, state, {\n                deleteCaseGroupResult: action.payload,\n            });\n        case CasesActions.API_CASE_GROUP_DELETE_FAILED:\n            return Object.assign({}, state, {\n                deleteCaseGroupResult: action.payload,\n            });\n        case CasesActions.API_CASE_GROUP_SUCCESS:\n            return Object.assign({}, state, {\n                caseGroup: action.payload,\n            });\n        case CasesActions.API_CASE_GROUP_FAILED:\n            return Object.assign({}, state, {\n                caseGroup: action.payload,\n            });\n        case CasesActions.API_CASE_GROUPS_SUCCESS:\n            return Object.assign({}, state, {\n                caseGroups: action.payload,\n            });\n        case CasesActions.API_CASE_GROUPS_FAILED:\n            return Object.assign({}, state, {\n                caseGroups: action.payload,\n            });\n\n        case CasesActions.API_CASE_CREATE_GROUPS_SUCCESS:\n            return Object.assign({}, state, {\n                createCaseGroupResult: action.payload,\n            });\n        case CasesActions.API_CASE_CREATE_GROUPS_FAILED:\n            return Object.assign({}, state, {\n                createCaseGroupResult: action.payload,\n            });\n\n        case TasksActions.API_TASKS_SUCCESS:\n            return Object.assign({}, state, {\n                tasks: action.payload,\n            });\n        case TasksActions.API_TASKS_FAILED:\n            return Object.assign({}, state, {\n                tasks: action.payload,\n            });\n\n        case TasksActions.API_TASK_SUCCESS:\n            return Object.assign({}, state, {\n                task: action.payload,\n            });\n        case TasksActions.API_TASK_FAILED:\n            return Object.assign({}, state, {\n                task: action.payload,\n            });\n\n        case TasksActions.API_TASKS_RESULT_SUCCESS:\n            return Object.assign({}, state, {\n                scanResults: action.payload,\n            });\n        case TasksActions.API_TASKS_RESULT_FAILED:\n            return Object.assign({}, state, {\n                scanResults: action.payload,\n            });\n        case TasksActions.API_TASKS_START_SUCCESS:\n            return Object.assign({}, state, {\n                taskStartResult: action.payload,\n            });\n        case TasksActions.API_TASKS_START_FAILED:\n            return Object.assign({}, state, {\n                taskStartResult: action.payload,\n            })\n\n        case CasesActions.API_TOOL_CASES_SUCCESS:\n            return Object.assign({}, state, {\n                toolCases: action.payload,\n            });\n        case CasesActions.API_TOOL_CASES_FAILED:\n            return Object.assign({}, state, {\n                toolCases: action.payload,\n            });\n        default:\n            return state;\n    }\n}\n\nconst ScpReducer = combineReducers({\n    reduxResult,\n});\n\nexport default ScpReducer;\n","/Users/xingfeng.yang/project/scpweb/src/actions/ProjectsAction.js",[],"/Users/xingfeng.yang/project/scpweb/src/api/ScpApi.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/app_create/AppCreate.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/projects/Projects.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/project_create/ProjectCreate.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/tools/Tools.js",["180"],"import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport './Tools.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronRight, faCube, faEllipsisH, faShieldVirus, faTags, faTh, faThList} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {getTools} from \"../../actions/ToolsAction\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\n\nclass Tools extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            layout: 'grid'\n        };\n    }\n\n    changeToList() {\n        this.setState({\n            layout: 'list'\n        });\n    }\n\n    changeToGrid() {\n        this.setState({\n            layout: 'grid'\n        });\n    }\n\n    render() {\n        return <Container className={'Tools'}>\n            <Row style={{padding: 0, margin: 0}}>\n                <Col md={12}>\n                    <FontAwesomeIcon style={{color: this.state.layout === 'list' ? 'rgb(36, 66, 164)' : '#99a', fontSize: '1.5em'}}\n                                     onClick={this.changeToList.bind(this)} icon={faThList}/>\n                    <FontAwesomeIcon\n                        style={{color: this.state.layout === 'grid' ? 'rgb(36, 66, 164)' : '#99a', marginLeft: '0.5em', fontSize: '1.5em'}}\n                        onClick={this.changeToGrid.bind(this)} icon={faTh}/>\n                </Col>\n            </Row>\n            {\n                this.state.layout === 'list' ?\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        {this.props.tools.map((tool, index) => {\n                            return this.renderToolRow(tool, index);\n                        })}\n                    </Row>\n                    :\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        {this.props.tools.map((tool, index) => {\n                            return this.renderToolCard(tool, index);\n                        })}\n                    </Row>\n            }\n        </Container>\n    }\n\n    renderToolRow(tool, index) {\n        return <Card w={12} key={index}>\n            <Container>\n                <Row style={{marginTop: '0.5em'}}>\n                    <Col md={1}>\n                        <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '3em'}} icon={faShieldVirus}/>\n                    </Col>\n                    <Col md={11}>\n                        <Row>\n                            <Col md={6}>\n                                <h3 style={{\n                                    whiteSpace: 'nowrap',\n                                    display: 'inline-block',\n                                    textOverflow: 'ellipsis',\n                                    overflow: 'hidden'\n                                }}>{tool.name}</h3>&nbsp;\n                                <span\n                                    style={{\n                                        position: 'relative',\n                                        background: '#666',\n                                        borderRadius: '3px',\n                                        padding: '0.3em',\n                                        color: '#fff',\n                                        paddingTop: '0.1em',\n                                        paddingBottom: '0.1em',\n                                        top: '-1em',\n                                    }}>{tool.category}</span>\n                            </Col>\n                            <Col md={6} style={{textAlign: 'right'}}>\n                                <FontAwesomeIcon\n                                    icon={faEllipsisH}/>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={10}>\n                                <h6 style={{display: 'inline-block'}}>{tool.description}</h6>&nbsp;&nbsp;&nbsp;\n                                <span style={{color: '#668', margin: 0}}><FontAwesomeIcon style={{color: '#668'}} icon={faTags}/>&nbsp;{tool.metadata}</span>\n                            </Col>\n                            <Col md={2} style={{textAlign: 'right'}}>\n                                <Link to={'tool/'+tool.id}> <FontAwesomeIcon icon={faChevronRight}/></Link>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    renderToolCard(tool, index) {\n        return <Card w={3} key={index}>\n            <Container>\n                <Row>\n                    <Col md={10}>\n                        <h3 style={{\n                            whiteSpace: 'nowrap',\n                            textOverflow: 'ellipsis',\n                            overflow: 'hidden'\n                        }}><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faShieldVirus}/>&nbsp;{tool.name}</h3>\n                    </Col>\n                    <Col md={2} style={{textAlign: 'right'}}>\n                        <FontAwesomeIcon icon={faEllipsisH}/>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{tool.description}</h6>\n                        <p style={{color: '#668', margin: 0}}><FontAwesomeIcon style={{color: '#668'}} icon={faTags}/>&nbsp;{tool.metadata}</p>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={6}>\n                        <span\n                            style={{\n                                background: '#666',\n                                borderRadius: '3px',\n                                padding: '0.3em',\n                                color: '#fff',\n                                paddingTop: '0.1em',\n                                paddingBottom: '0.1em'\n                            }}>{tool.category}</span>\n                    </Col>\n                    <Col md={6} style={{textAlign: 'right'}}>\n                        <Link to={'tool/'+tool.id}> <FontAwesomeIcon icon={faChevronRight}/></Link>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    componentDidMount() {\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Tools',\n                clickable: false,\n                route: ''\n            }\n        ]);\n        this.props.getTools();\n    }\n}\n\nconst mapStateToProps = state => ({\n    tools: state.reduxResult.tools.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getTools,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tools);\n","/Users/xingfeng.yang/project/scpweb/src/api/Fetch.js",[],"/Users/xingfeng.yang/project/scpweb/src/actions/ToolsAction.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/project/Project.js",["181"],"import React from \"react\";\nimport {Col, Container, Dropdown, Row} from \"react-bootstrap\";\nimport './Project.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronRight,\n    faCube,\n    faEllipsisH,\n    faPlus\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {deleteApp, getProject} from \"../../actions/ProjectsAction\";\nimport {connect} from \"react-redux\";\nimport PushButton from \"../../components/button/PushButton\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {Link} from \"react-router-dom\";\nimport {getScanTasks} from \"../../actions/TasksAction\";\nimport ScanTaskList from \"../../components/task-list/ScanTaskList\";\n\nclass Project extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Container className={'Projects'}>\n            <Row style={{padding: 0, margin: 0}}>\n                <Col md={12}>\n                    <PushButton onClick={this.gotoCreateApp.bind(this)}> <FontAwesomeIcon\n                        icon={faPlus}/> &nbsp;创建应用</PushButton>\n                </Col>\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                {this.renderProjectCard()}\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                <Card title={'应用'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.project.applications && this.props.project.applications.length !== 0) ? this.props.project.applications.map((app, index) => {\n                                    return this.renderAppRow(app, index);\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n                <Card title={'扫描记录'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.tasks && this.props.tasks.length !== 0) ? this.props.tasks.map((task, index) => {\n                                    return <ScanTaskList task={task} key={index}/>;\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n            </Row>\n        </Container>\n    }\n\n\n    renderAppRow(app, index) {\n        return <Container className={'AppItem'} key={index}>\n            <Row style={{marginTop: '0.5em'}}>\n                <Col md={1}>\n                    <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '2em', marginTop: '0.5em'}} icon={faCube}/>\n                </Col>\n                <Col md={11}>\n                    <Row>\n                        <Col md={6}>\n                            <h3>{app.name}</h3>\n                        </Col>\n                        <Col md={6} style={{textAlign: 'right'}}>\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"none\" id=\"dropdown-basic\">\n                                    <FontAwesomeIcon\n                                        icon={faEllipsisH}/>\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item onClick={this.deleteApp.bind(this, app.id)}>删除</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={10}>\n                            <h6>{app.description}</h6>\n                        </Col>\n                        <Col md={2} style={{textAlign: 'right'}}>\n                            <Link to={'/project/' + this.props.project.id + '/' + app.id}><FontAwesomeIcon icon={faChevronRight}/></Link>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>;\n    }\n\n    renderProjectCard() {\n        return <Card title={'项目信息'} w={3}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faCube}/>&nbsp;{this.props.project.name}</h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{this.props.project.description}</h6>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    componentDidMount() {\n        this.props.getProject(this.props.match.params.id);\n        this.props.getScanTasks({\n            projectId: this.props.match.params.id\n        });\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Projects',\n                clickable: true,\n                route: '/projects'\n            },\n            {\n                title: 'Project-' + this.props.match.params.id,\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n\n    gotoCreateApp() {\n        this.props.history.push('/app/create/' + this.props.match.params.id);\n    }\n\n    deleteApp(appId) {\n        this.props.deleteApp(this.props.match.params.id, appId);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.deleteAppResult !== this.props.deleteAppResult) {\n            this.props.getProject(this.props.match.params.id);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    project: state.reduxResult.project.data,\n    tasks: state.reduxResult.tasks.data,\n    deleteAppResult: state.reduxResult.deleteAppResult,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getProject,\n    deleteApp,\n    getScanTasks,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);\n","/Users/xingfeng.yang/project/scpweb/src/actions/BreadCrumbMenuAction.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/app/Application.js",["182"],"import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport './Application.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCube, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {getApp, getProject} from \"../../actions/ProjectsAction\";\nimport {connect} from \"react-redux\";\nimport PushButton from \"../../components/button/PushButton\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {getScanTasks} from \"../../actions/TasksAction\";\nimport ScanTaskList from \"../../components/task-list/ScanTaskList\";\nimport {Link} from \"react-router-dom\";\n\nclass Application extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Container className={'Application'}>\n            <Row style={{padding: 0, margin: 0}}>\n                <Col md={12}>\n                    <PushButton onClick={this.gotoCreateScan.bind(this)}><FontAwesomeIcon icon={faPlay}/> &nbsp;创建扫描任务</PushButton>\n                </Col>\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                {this.renderAppCard()}\n                {this.renderProjectCard()}\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                <Card title={'扫描记录'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.tasks && this.props.tasks.length !== 0) ? this.props.tasks.map((task, index) => {\n                                    return <ScanTaskList task={task} key={index}/>;\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n                <Card title={'正在运行中的扫描任务'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.tasks && this.tasksFilterByStatus('RUNNING').length !== 0) ? this.props.tasks.map((task, index) => {\n                                    return <ScanTaskList task={task} key={index}/>;\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n            </Row>\n        </Container>\n    }\n\n    tasksFilterByStatus(status) {\n        let data = [];\n        for (let i = 0; i < this.props.tasks.length; i++) {\n            if (this.props.tasks[i].status === status) {\n                data.push(this.props.tasks[i]);\n            }\n        }\n        return data;\n    }\n\n    gotoCreateScan() {\n        this.props.history.push({\n            pathname: '/task/create',\n            createInfo: {\n                projectId: this.props.match.params.projectId,\n                appId: this.props.match.params.appId,\n            }\n        });\n    }\n\n    renderAppCard() {\n        return <Card title={'应用信息'} w={3}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faCube}/>&nbsp;{this.props.app.name}</h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <span style={{fontSize: '1.1em'}}>{this.props.app.description}</span>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    renderProjectCard() {\n        return <Card title={'项目信息'} w={3}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faCube}/>&nbsp;<Link\n                            to={'/project/' + this.props.project.id}>{this.props.project.name}</Link></h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <span style={{fontSize: '1.1em'}}>{this.props.project.description}</span>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n\n    componentDidMount() {\n        this.props.getProject(this.props.match.params.projectId);\n        this.props.getApp(this.props.match.params.projectId, this.props.match.params.appId);\n        this.props.getScanTasks({\n            appId: this.props.match.params.appId\n        });\n\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Projects',\n                clickable: true,\n                route: '/projects'\n            },\n            {\n                title: 'Project-' + this.props.match.params.projectId,\n                clickable: true,\n                route: '/project/' + this.props.match.params.projectId\n            },\n            {\n                title: 'Application-' + this.props.match.params.appId,\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n}\n\nconst mapStateToProps = state => ({\n    project: state.reduxResult.project.data,\n    app: state.reduxResult.app.data,\n    tasks: state.reduxResult.tasks.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getProject,\n    getApp,\n    getScanTasks,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Application);\n","/Users/xingfeng.yang/project/scpweb/src/pages/tool/Tool.js",["183","184","185","186","187","188","189","190","191","192"],"import React from \"react\";\nimport {Col, Container, Dropdown, Row} from \"react-bootstrap\";\nimport './Tool.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCheckCircle,\n    faChevronRight,\n    faCube,\n    faCubes,\n    faEject,\n    faEllipsisH,\n    faFileSignature,\n    faPlay,\n    faPlayCircle,\n    faPlus,\n    faShieldAlt,\n    faSpinner,\n    faStopCircle,\n    faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport PushButton from \"../../components/button/PushButton\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {getTool} from \"../../actions/ToolsAction\";\nimport {deleteCase, getCasesByToolId} from \"../../actions/CasesAction\";\nimport {Link} from \"react-router-dom\";\nimport {getScanTasks} from \"../../actions/TasksAction\";\nimport ScanTaskList from \"../../components/task-list/ScanTaskList\";\n\nclass Tool extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Container className={'Tool'}>\n            <Row style={{padding: 0, margin: 0}}>\n                <Col md={12}>\n                    <PushButton onClick={this.gotoCreateScan.bind(this)}><FontAwesomeIcon icon={faPlay}/> &nbsp;创建扫描任务</PushButton>\n                    <PushButton style={{marginLeft: '1em'}} onClick={this.gotoCreateCase.bind(this)}> <FontAwesomeIcon\n                        icon={faPlus}/> &nbsp;添加用例</PushButton>\n                </Col>\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                {this.renderToolCard()}\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                <Card title={'用例列表'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.toolCases && this.props.toolCases.length !== 0) ? this.props.toolCases.map((cas, index) => {\n                                    return this.renderCaseRow(cas, index);\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n                <Card title={'正在运行中的扫描任务'} w={6}>\n                    <Container>\n                        <Row>\n                            {\n                                (this.props.tasks && this.tasksFilterByStatus('RUNNING').length !== 0) ? this.props.tasks.map((task, index) => {\n                                    return <ScanTaskList task={task} key={index}/>;\n                                }) : <span style={{color: '#668'}}>无</span>\n                            }\n                        </Row>\n                    </Container>\n                </Card>\n            </Row>\n        </Container>\n    }\n\n    tasksFilterByStatus(status) {\n        let data = [];\n        for (let i = 0; i < this.props.tasks.length; i++) {\n            if (this.props.tasks[i].status === status) {\n                data.push(this.props.tasks[i]);\n            }\n        }\n        return data;\n    }\n\n    gotoCreateScan() {\n        this.props.history.push({\n            pathname: '/task/create',\n            createInfo: {\n                toolId: this.props.match.params.toolId,\n            }\n        });\n    }\n\n    renderToolCard() {\n        return <Card title={'工具信息'} w={6}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faCube}/>&nbsp;{this.props.tool.name}</h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <span style={{fontSize: '1.1em'}}>{this.props.tool.description}</span>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    renderCaseRow(cas, index) {\n        return <Container className={'AppItem'} key={index}>\n            <Row style={{marginTop: '0.5em'}}>\n                <Col md={1}>\n                    <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '2em', marginTop: '0.5em'}} icon={faCube}/>\n                </Col>\n                <Col md={11}>\n                    <Row>\n                        <Col md={6}>\n                            <h3>{cas.name}</h3>\n                        </Col>\n                        <Col md={6} style={{textAlign: 'right'}}>\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"none\" id=\"dropdown-basic\">\n                                    <FontAwesomeIcon\n                                        icon={faEllipsisH}/>\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item onClick={this.deleteCase.bind(this, cas.id)}>删除</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={10}>\n                            <h6>{cas.description}</h6>\n                        </Col>\n                        <Col md={2} style={{textAlign: 'right'}}>\n                            <Link to={'/case/' + cas.id}><FontAwesomeIcon icon={faChevronRight}/></Link>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>;\n    }\n\n    componentDidMount() {\n        this.props.getTool(this.props.match.params.toolId);\n        this.props.getScanTasks({\n            toolId: this.props.match.params.toolId\n        });\n        this.props.getCasesByToolId(this.props.match.params.toolId);\n\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Tools',\n                clickable: true,\n                route: '/tools'\n            },\n            {\n                title: 'Tool-' + this.props.match.params.toolId,\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n\n    deleteCase(caseId) {\n        this.props.deleteCase(caseId);\n    }\n\n    gotoCreateCase() {\n        this.props.history.push('/tool/case/' + this.props.match.params.toolId);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.deleteCaseResult !== this.props.deleteCaseResult) {\n            this.props.getCasesByToolId(this.props.match.params.toolId);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    tool: state.reduxResult.tool.data,\n    toolCases: state.reduxResult.toolCases.data,\n    deleteCaseResult: state.reduxResult.deleteCaseResult,\n    tasks: state.reduxResult.tasks.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    setBreadCrumbMenu,\n    getTool,\n    deleteCase,\n    getScanTasks,\n    getCasesByToolId\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tool);\n","/Users/xingfeng.yang/project/scpweb/src/pages/case_create/CaseCreate.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/cases/Cases.js",[],"/Users/xingfeng.yang/project/scpweb/src/actions/CasesAction.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/case_groups/CaseGroups.js",["193"],"import React from \"react\";\nimport {Col, Container, Dropdown, Row} from \"react-bootstrap\";\nimport './CaseGroups.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronRight, faCube, faCubes, faEllipsisH, faFileSignature, faTh, faThList} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {deleteCaseGroups, getCaseGroups} from \"../../actions/CasesAction\";\n\nclass CaseGroups extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            layout: 'grid'\n        };\n    }\n\n    changeToList() {\n        this.setState({\n            layout: 'list'\n        });\n    }\n\n    changeToGrid() {\n        this.setState({\n            layout: 'grid'\n        });\n    }\n\n    render() {\n        return <Container className={'CaseGroups'}>\n            <Row style={{padding: 0, margin: 0}}>\n                <Col md={12}>\n                    <FontAwesomeIcon style={{color: this.state.layout === 'list' ? 'rgb(36, 66, 164)' : '#99a', fontSize: '1.5em'}}\n                                     onClick={this.changeToList.bind(this)} icon={faThList}/>\n                    <FontAwesomeIcon\n                        style={{color: this.state.layout === 'grid' ? 'rgb(36, 66, 164)' : '#99a', marginLeft: '0.5em', fontSize: '1.5em'}}\n                        onClick={this.changeToGrid.bind(this)} icon={faTh}/>\n                </Col>\n            </Row>\n            {\n                this.state.layout === 'list' ?\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        {this.props.caseGroups.map((cas, index) => {\n                            return this.renderCaseRow(cas, index);\n                        })}\n                    </Row>\n                    :\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        {this.props.caseGroups.map((cas, index) => {\n                            return this.renderCaseCard(cas, index);\n                        })}\n                    </Row>\n            }\n        </Container>\n    }\n\n    renderCaseRow(cas, index) {\n        return <Card w={12} key={index}>\n            <Container>\n                <Row style={{marginTop: '0.5em'}}>\n                    <Col md={1}>\n                        <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '3em',marginTop:'0.1em'}} icon={faCube}/>\n                    </Col>\n                    <Col md={11}>\n                        <Row>\n                            <Col md={6}>\n                                <h3 style={{\n                                    whiteSpace: 'nowrap',\n                                    textOverflow: 'ellipsis',\n                                    overflow: 'hidden',\n                                    display: 'inline-block'\n                                }}>{cas.name}</h3>\n                            </Col>\n                            <Col md={6} style={{textAlign: 'right'}}>\n                                <Dropdown>\n                                    <Dropdown.Toggle variant=\"none\" id=\"dropdown-basic\">\n                                        <FontAwesomeIcon\n                                            icon={faEllipsisH}/>\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item onClick={this.deleteCaseGroups.bind(this, cas.id)}>删除</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={10}>\n                                <FontAwesomeIcon style={{color: '#668'}} icon={faFileSignature}/>&nbsp;\n                                <span>{cas.cases.length}</span>&nbsp;&nbsp;&nbsp;\n                                <span style={{fontSize:'1.1em'}}>{cas.description}</span>\n                            </Col>\n                            <Col md={2} style={{textAlign: 'right'}}>\n                                <Link to={'case/' + cas.id}> <FontAwesomeIcon icon={faChevronRight}/></Link>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n\n    renderCaseCard(cas, index) {\n        return <Card w={3} key={index}>\n            <Container>\n                <Row>\n                    <Col md={8}>\n                        <h3 style={{\n                            whiteSpace: 'nowrap',\n                            textOverflow: 'ellipsis',\n                            overflow: 'hidden'\n                        }}><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faCube}/>&nbsp;{cas.name}</h3>\n                    </Col>\n                    <Col md={4} style={{textAlign: 'right'}}>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"none\" id=\"dropdown-basic\">\n                                <FontAwesomeIcon\n                                    icon={faEllipsisH}/>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item onClick={this.deleteCaseGroups.bind(this, cas.id)}>删除</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{cas.description}</h6>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={6}>\n                        <FontAwesomeIcon style={{color: '#668'}} icon={faFileSignature}/>&nbsp;<span>{cas.cases.length}</span>\n                    </Col>\n                    <Col md={6} style={{textAlign: 'right'}}>\n                        <Link to={'case/' + cas.id}> <FontAwesomeIcon icon={faChevronRight}/></Link>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    componentDidMount() {\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'CaseGroups',\n                clickable: false,\n                route: ''\n            }\n        ]);\n        this.props.getCaseGroups();\n    }\n\n    deleteCaseGroups(caseId) {\n        this.props.deleteCaseGroups(caseId);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.deleteCaseGroupsResult !== this.props.deleteCaseGroupsResult) {\n            this.props.getCaseGroups();\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    caseGroups: state.reduxResult.caseGroups.data,\n    deleteCaseGroupsResult: state.reduxResult.deleteCaseGroupsResult,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getCaseGroups,\n    deleteCaseGroups,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CaseGroups);\n","/Users/xingfeng.yang/project/scpweb/src/pages/case_group_create/CaseGroupCreate.js",["194"],"import React from \"react\";\nimport {Container, FormControl, FormLabel, Row} from \"react-bootstrap\";\nimport './CaseGroupCreate.css';\nimport PushButton from \"../../components/button/PushButton\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\nimport Card from \"../../components/card/Card\";\nimport {bindActionCreators} from \"redux\";\nimport {createProject} from \"../../actions/ProjectsAction\";\nimport {connect} from \"react-redux\";\nimport ModalWrapper from \"../../components/modal/ModalWrapper\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {createCaseGroup} from \"../../actions/CasesAction\";\n\nclass CaseGroupCreate extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.createCaseGroupRequest = {\n            name: '',\n            description: ''\n        };\n\n        this.state = {\n            btnCreate: {\n                disabled: false,\n                text: '创建用例组'\n            },\n            modalShow: false,\n        };\n    }\n\n    render() {\n        return <Container className={'ProjectCreate'}>\n            <Row style={{padding: 0, margin: 0, marginTop: '0em'}}>\n                <Card title={'创建用例组'} md={6}>\n                    <Row style={{padding: 0, margin: 0, marginTop: '0em'}}>\n                        <FormLabel style={{color: 'rgb(36, 66, 84)'}}>用例组名称</FormLabel>\n                        <FormControl onChange={this.changeName.bind(this)} placeHolder={'输入用例组名称'}/>\n                    </Row>\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        <FormLabel style={{color: 'rgb(36, 66, 84)'}}>用例组描述</FormLabel>\n                        <FormControl onChange={this.changeDesc.bind(this)} as=\"textarea\" placeHolder={'输入描述'}/>\n                    </Row>\n                    <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                        <ModalWrapper show={this.state.modalShow} closeHook={this.modalClose.bind(this)}\n                                      title={'提示'}>{this.state.modalText}</ModalWrapper>\n                        <PushButton disabled={this.state.btnCreate.disabled} onClick={this.createCaseGroup.bind(this)}> <FontAwesomeIcon\n                            icon={faCheck}/> &nbsp;{this.state.btnCreate.text}\n                        </PushButton>\n                    </Row>\n                </Card>\n            </Row>\n        </Container>\n    }\n\n    modalClose() {\n        this.setState({\n            modalShow: false,\n        });\n    }\n\n    showModal(text) {\n        this.setState({\n            modalShow: true,\n            modalText: text,\n        });\n    }\n\n    changeName(e) {\n        this.createCaseGroupRequest.name = e.currentTarget.value;\n    }\n\n    changeDesc(e) {\n        this.createCaseGroupRequest.description = e.currentTarget.value;\n    }\n\n    createCaseGroup() {\n        if (this.createCaseGroupRequest.name === '' || this.createCaseGroupRequest.description === '') {\n            this.showModal('信息填写不完整');\n        } else {\n            this.setState({\n                btnCreate: {\n                    disabled: true,\n                    text: '创建中...'\n                }\n            });\n            this.props.createCaseGroup(this.createCaseGroupRequest);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.createCaseGroupResult !== this.props.createCaseGroupResult) {\n            this.setState({\n                btnCreate: {\n                    disabled: false,\n                    text: '创建用例组'\n                }\n            });\n            if (!nextProps.createCaseGroupResult.status) {\n                this.showModal(nextProps.createCaseGroupResult.message);\n            } else {\n                this.props.history.push('/case/' + nextProps.createCaseGroupResult.data.id);\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'CaseGroup',\n                clickable: true,\n                route: '/case-groups'\n            },\n            {\n                title: 'Create',\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    createCaseGroupResult: state.reduxResult.createCaseGroupResult,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    createCaseGroup,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CaseGroupCreate);\n","/Users/xingfeng.yang/project/scpweb/src/actions/TasksAction.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/case/Case.js",["195"],"/Users/xingfeng.yang/project/scpweb/src/pages/task_create/TaskCreate.js",[],"/Users/xingfeng.yang/project/scpweb/src/components/task-list/ScanTaskList.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/task/Task.js",["196"],"import React from \"react\";\nimport {Col, Container, ProgressBar, Row} from \"react-bootstrap\";\nimport './Task.css';\nimport Card from \"../../components/card/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCheckCircle,\n    faClock,\n    faCube,\n    faDownload,\n    faFileSignature,\n    faQuestion,\n    faShieldAlt,\n    faSpinner,\n    faStopCircle,\n    faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {setBreadCrumbMenu} from \"../../actions/BreadCrumbMenuAction\";\nimport {getCase} from \"../../actions/CasesAction\";\nimport {getScanTask} from \"../../actions/TasksAction\";\nimport {getTool} from \"../../actions/ToolsAction\";\nimport {getApp, getProject} from \"../../actions/ProjectsAction\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment-timezone\";\n\nclass Task extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Container className={'Case'}>\n            <Row style={{padding: 0, margin: 0, marginTop: '0em'}}>\n                <Card title={'扫描状态'} w={6}>\n                    <Container>\n                        <Row>\n                            <Col md={4}>\n                                {this.renderStatus(this.props.task.status)}\n                            </Col>\n                            <Col md={8}>\n                                <p style={{fontSize: '1em', marginTop: '0.6em', float: 'right'}}>{this.getTime()}</p>\n                            </Col>\n                        </Row>\n                        <ProgressBar style={{margin: 0}} variant={this.getVariant()} animated now={this.getProgressCount()}/>\n                    </Container>\n                </Card>\n            </Row>\n            <Row style={{padding: 0, margin: 0, marginTop: '1em'}}>\n                {this.renderAppCard()}\n                {this.renderCaseCard()}\n                {this.renderToolCard()}\n            </Row>\n        </Container>\n    }\n\n    getTime() {\n        let timeDuring = moment(this.props.task.startTime).tz('Asia/ShangHai').fromNow() + '-' + moment(this.props.task.endTime).tz('Asia/ShangHai').fromNow();\n        switch (this.props.task.status) {\n            case 'READY':\n                return <span style={{fontSize: '0.77em'}}>未开始</span>;\n            case 'RUNNING':\n                return <span style={{fontSize: '0.77em'}}>{moment(this.props.task.startTime).tz('Asia/ShangHai').fromNow() + '-未结束'}</span>;\n            case 'DONE':\n                return <span\n                    style={{fontSize: '0.77em'}}>{timeDuring}</span>;\n            case 'FAILED':\n                return <span\n                    style={{fontSize: '0.77em'}}>{timeDuring}</span>;\n            case 'ABORT':\n                return <span\n                    style={{fontSize: '0.77em'}}>{timeDuring}</span>;\n            default:\n                return <span\n                    style={{fontSize: '0.77em'}}>{timeDuring}</span>;\n        }\n    }\n\n\n    getVariant() {\n        if (this.props.task.status === 'READY' || this.props.task.status === 'RUNNING') {\n            return \"\";\n        } else if (this.props.task.status === 'DONE') {\n            return 'success'\n        } else if (this.props.task.status === 'ABORT') {\n            return 'warning';\n        } else if (this.props.task.status === 'FAILED') {\n            return 'danger';\n        } else {\n            return \"\";\n        }\n    }\n\n    getProgressCount() {\n        switch (this.props.task.status) {\n            case 'READY':\n                return 6.18;\n            case 'RUNNING':\n                return 61.8;\n            case 'DONE':\n                return 100;\n            case 'FAILED':\n                return 100;\n            case 'ABORT':\n                return 100;\n            default:\n                return 61.8;\n        }\n    }\n\n    renderStatus(status) {\n        switch (status) {\n            case 'READY':\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '2em'}} icon={faClock}/>\n                    <h3 style={{color: 'rgb(36, 66, 164)', display: 'inline-block'}}>&nbsp;准备中</h3>\n                </Container>;\n            case 'RUNNING':\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'green', fontSize: '2em'}} icon={faSpinner}/>\n                    <h3 style={{color: 'green', display: 'inline-block'}}>&nbsp;扫描中</h3>\n                </Container>;\n            case 'DONE':\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'rgb(36, 66, 164)', fontSize: '2em'}} icon={faCheckCircle}/>\n                    <h3 style={{color: 'rgb(36, 66, 164)', display: 'inline-block'}}>&nbsp;扫描完成</h3>\n                </Container>;\n            case 'FAILED':\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'red', fontSize: '2em'}} icon={faTimesCircle}/>\n                    <h3 style={{color: 'red', display: 'inline-block'}}>&nbsp;扫描失败</h3>\n                </Container>;\n            case 'ABORT':\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'gray', fontSize: '2em'}} icon={faStopCircle}/>\n                    <h3 style={{color: 'gray', display: 'inline-block'}}>&nbsp;终止</h3>\n                </Container>;\n            default:\n                return <Container style={{padding: 0}}>\n                    <FontAwesomeIcon style={{color: 'gray', fontSize: '2em'}} icon={faQuestion}/>\n                    <h3 style={{color: 'gray', display: 'inline-block'}}>&nbsp;未知状态</h3>\n                </Container>;\n        }\n    }\n\n    renderCaseCard() {\n        return <Card title={'用例信息'} w={4}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faFileSignature}/>&nbsp;<Link\n                            to={'/case/' + this.props.cas.id}>{this.props.cas.name}</Link></h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{this.props.cas.description}</h6>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{this.props.cas.scriptPath}&nbsp;&nbsp;<FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faDownload}/></h6>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    renderToolCard() {\n        return <Card title={'工具信息'} w={4}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}} icon={faShieldAlt}/>&nbsp;<Link\n                            to={'/tool/' + this.props.tool.id}>{this.props.tool.name}</Link></h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <h6>{this.props.tool.description}</h6>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n    renderAppCard() {\n        return <Card title={'应用信息'} w={4}>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3><FontAwesomeIcon style={{color: 'rgb(36, 66, 164)'}}\n                                             icon={faCube}/>&nbsp;<Link\n                            to={'/project/' + this.props.project.id}>{this.props.project.name}</Link> &nbsp;/&nbsp; <Link\n                            to={\"/project/\" + this.props.project.id + '/' + this.props.app.id}>{this.props.app.name}</Link></h3>\n                    </Col>\n                </Row>\n                <Row style={{marginTop: '1em'}}>\n                    <Col md={12}>\n                        <span style={{fontSize: '1.1em'}}>{this.props.project.description}</span>\n                    </Col>\n                    <Col md={12}>\n                        <span style={{fontSize: '1.1em'}}>{this.props.app.description}</span>\n                    </Col>\n                </Row>\n            </Container>\n        </Card>;\n    }\n\n\n    componentDidMount() {\n        this.props.getScanTask(this.props.match.params.taskId);\n        this.props.setBreadCrumbMenu([\n            {\n                title: 'Task',\n                clickable: false,\n                route: ''\n            }\n        ]);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.task !== this.props.task) {\n            this.props.getCase(nextProps.task.useCase.id);\n            this.props.getApp(nextProps.task.application.projectId, nextProps.task.application.id);\n            this.props.getProject(nextProps.task.application.projectId);\n            this.props.getTool(nextProps.task.toolId);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    cas: state.reduxResult.cas.data,\n    task: state.reduxResult.task.data,\n    app: state.reduxResult.app.data,\n    project: state.reduxResult.project.data,\n    tool: state.reduxResult.tool.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getCase,\n    getTool,\n    getScanTask,\n    getApp,\n    getProject,\n    setBreadCrumbMenu\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n","/Users/xingfeng.yang/project/scpweb/src/pages/no-match/NoMatch.js",[],"/Users/xingfeng.yang/project/scpweb/src/pages/case_editor/CaseEditor.js",["197"],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":8,"column":13,"nodeType":"204","messageId":"205","endLine":8,"endColumn":19},{"ruleId":"198","replacedBy":"206"},{"ruleId":"200","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":20,"column":5,"nodeType":"210","messageId":"211","endLine":22,"endColumn":6},{"ruleId":"212","severity":1,"message":"213","line":35,"column":44,"nodeType":"214","messageId":"215","endLine":35,"endColumn":46},{"ruleId":"212","severity":1,"message":"213","line":79,"column":43,"nodeType":"214","messageId":"215","endLine":79,"endColumn":45},{"ruleId":"208","severity":1,"message":"209","line":9,"column":5,"nodeType":"210","messageId":"211","endLine":11,"endColumn":6},{"ruleId":"208","severity":1,"message":"209","line":7,"column":5,"nodeType":"210","messageId":"211","endLine":9,"endColumn":6},{"ruleId":"198","replacedBy":"216"},{"ruleId":"200","replacedBy":"217"},{"ruleId":"208","severity":1,"message":"209","line":6,"column":5,"nodeType":"210","messageId":"211","endLine":8,"endColumn":6},{"ruleId":"212","severity":1,"message":"213","line":129,"column":49,"nodeType":"214","messageId":"215","endLine":129,"endColumn":51},{"ruleId":"212","severity":1,"message":"213","line":130,"column":46,"nodeType":"214","messageId":"215","endLine":130,"endColumn":48},{"ruleId":"202","severity":1,"message":"218","line":6,"column":25,"nodeType":"204","messageId":"205","endLine":6,"endColumn":31},{"ruleId":"208","severity":1,"message":"209","line":22,"column":5,"nodeType":"210","messageId":"211","endLine":24,"endColumn":6},{"ruleId":"208","severity":1,"message":"209","line":17,"column":5,"nodeType":"210","messageId":"211","endLine":19,"endColumn":6},{"ruleId":"202","severity":1,"message":"219","line":7,"column":5,"nodeType":"204","messageId":"205","endLine":7,"endColumn":18},{"ruleId":"202","severity":1,"message":"220","line":10,"column":5,"nodeType":"204","messageId":"205","endLine":10,"endColumn":12},{"ruleId":"202","severity":1,"message":"221","line":11,"column":5,"nodeType":"204","messageId":"205","endLine":11,"endColumn":12},{"ruleId":"202","severity":1,"message":"222","line":13,"column":5,"nodeType":"204","messageId":"205","endLine":13,"endColumn":20},{"ruleId":"202","severity":1,"message":"223","line":15,"column":5,"nodeType":"204","messageId":"205","endLine":15,"endColumn":17},{"ruleId":"202","severity":1,"message":"224","line":17,"column":5,"nodeType":"204","messageId":"205","endLine":17,"endColumn":16},{"ruleId":"202","severity":1,"message":"225","line":18,"column":5,"nodeType":"204","messageId":"205","endLine":18,"endColumn":14},{"ruleId":"202","severity":1,"message":"226","line":19,"column":5,"nodeType":"204","messageId":"205","endLine":19,"endColumn":17},{"ruleId":"202","severity":1,"message":"227","line":20,"column":5,"nodeType":"204","messageId":"205","endLine":20,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":33,"column":5,"nodeType":"210","messageId":"211","endLine":35,"endColumn":6},{"ruleId":"202","severity":1,"message":"220","line":6,"column":33,"nodeType":"204","messageId":"205","endLine":6,"endColumn":40},{"ruleId":"202","severity":1,"message":"228","line":9,"column":9,"nodeType":"204","messageId":"205","endLine":9,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":18,"column":5,"nodeType":"210","messageId":"211","endLine":20,"endColumn":6},{"ruleId":"208","severity":1,"message":"209","line":29,"column":5,"nodeType":"210","messageId":"211","endLine":31,"endColumn":6},{"ruleId":"208","severity":1,"message":"209","line":34,"column":5,"nodeType":"210","messageId":"211","endLine":36,"endColumn":6},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"no-unused-vars","'faBell' is defined but never used.","Identifier","unusedVar",["229"],["230"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["229"],["230"],"'faCube' is defined but never used.","'faCheckCircle' is defined but never used.","'faCubes' is defined but never used.","'faEject' is defined but never used.","'faFileSignature' is defined but never used.","'faPlayCircle' is defined but never used.","'faShieldAlt' is defined but never used.","'faSpinner' is defined but never used.","'faStopCircle' is defined but never used.","'faTimesCircle' is defined but never used.","'createProject' is defined but never used.","no-global-assign","no-unsafe-negation"]